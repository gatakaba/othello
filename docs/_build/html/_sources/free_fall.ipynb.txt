{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 自由落下の状態方程式\n",
    "\n",
    "質量M,ダンパ係数C,弾性係数Kの運動方程式は以下のようになる\n",
    "\n",
    "$$ M \\frac{d^{2}x}{dt^{2}} + C \\frac{dx}{dt} + K x = f(t)  $$\n",
    "\n",
    "ここで空気抵抗を無視して方程式を整理すると\n",
    "\n",
    "$$ M \\frac{d^{2}x}{dt^{2}} = Mg  $$\n",
    "\n",
    "\n",
    "ここで 現在位置 $x$ と速度 $v$ を状態とすると状態空間方程式\n",
    "$$ \\mathbf{z}_{t+1} = A \\mathbf{z}_{t} + B u_{t} $$\n",
    "$$ \\mathbf{x}_{t} = C \\mathbf{z}_{t} $$\n",
    "のパラメータは以下のようになる。\n",
    "\n",
    "$ \\mathbf{z}_{t}= \\left[ x_{t} , v_{t} \\right]^{T} $ \n",
    ",\n",
    "$\n",
    "  A = \\left[\n",
    "    \\begin{array}{rr}\n",
    "      1 & dt \\\\\n",
    "      0 &  1\n",
    "    \\end{array}\n",
    "  \\right]\n",
    "$\n",
    ",\n",
    "$\n",
    "  B = \\left[\n",
    "    \\begin{array}{rr}\n",
    "      0 & 0 \\\\\n",
    "      0 & \\frac{dt}{M}\n",
    "    \\end{array}\n",
    "  \\right]\n",
    "$\n",
    ",\n",
    "$ \\mathbf{u}_{t}= \\left[0 ,Mg \\right]^{T} $\n",
    ",\n",
    "$ C= \\left[1 ,0 \\right] $\n",
    ",\n",
    "$\n",
    "  Q = \\left[\n",
    "    \\begin{array}{rr}\n",
    "      \\frac{dt^{3}}{3} & \\frac{dt^{2}}{2} \\\\\n",
    "      \\frac{dt^{2}}{2} & dt\n",
    "    \\end{array}\n",
    "  \\right]q\n",
    "$,\n",
    "$ R = r $\n",
    "\n",
    "このモデルパラメータを用いてサンプリングレート1000Hzで0.5秒間物体を観測し、その後の1.5秒後までを予測してみよう。\n",
    "\n",
    "プログラムは以下のようになる\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import os"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "os.chdir('..')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "from kalmanfilter.kalmanfilter import KalmanFilter"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "dt = 10 ** -3"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## モデルのパラメータを追加"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "M=10"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "A = np.array([[1, dt],[0, 1]])\n",
    "B = np.array([[0, 0], [0, dt / M]])\n",
    "C = np.atleast_2d([1, 0])\n",
    "q = 1\n",
    "r = 1\n",
    "Q = np.array([[dt ** 3 / 3, dt ** 2 / 2], [dt ** 2 / 2, dt]]) * q\n",
    "R = np.eye(1) * r\n",
    "s = np.array([0, 0])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## カルマンフィルタ インスタンス作成"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "kf = KalmanFilter(A, C, Q, R, s, initial_covariance=None, drive_matrix=B)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "N = 2000\n",
    "t = np.arange(0, N * dt, dt)\n",
    "true_x = np.empty(N)\n",
    "observed_x = np.empty(500)\n",
    "estimated_x = np.empty(N)\n",
    "estimated_variance = np.empty(N)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 真の軌道の作成(観測不可)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "y = -t ** 2 * 9.8 / 2 + 10 * t + 10"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## ガウシアンノイズが加算された観測データを用いて位置と速度を推定"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "for i in range(500):\n",
    "    x = y[i] + np.random.normal(0, 0.5)\n",
    "    observed_x[i] = x\n",
    "    u = np.array([0, -M * 9.8])\n",
    "    kf.update(x, u)\n",
    "    estimated_x[i] = kf.current_state[0][0]\n",
    "    estimated_variance[i] = kf.current_state[1][0, 0]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 1.5秒先まで予測"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "m, p = kf.predict_state(N - 500, u)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 予測した軌道データを格納"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "for i in range(N - 500):\n",
    "    estimated_x[i + 500] = m[i][0]\n",
    "    estimated_variance[i + 500] = p[i][0, 0]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 描画"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x1088e05c0>"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x10867fa20>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(t[:500], observed_x, \"k-\", label=\"observed trajectory\", alpha=0.25)\n",
    "plt.plot(t, y, \"g-\", label=\"true trajectory\")\n",
    "plt.fill_between(t, estimated_x - estimated_variance ** 0.5, estimated_x + estimated_variance ** 0.5, alpha=0.25)\n",
    "plt.plot(t, estimated_x, \"ro-\", label=\"filterd trajectory\")\n",
    "plt.legend()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.5.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}
